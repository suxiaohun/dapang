// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/face_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaceApiClient is the client API for FaceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceApiClient interface {
	FaceVerify(ctx context.Context, in *FaceVerifyRequest, opts ...grpc.CallOption) (*FaceVerifyResponse, error)
	FaceExtract(ctx context.Context, in *FaceExtractRequest, opts ...grpc.CallOption) (*FaceExtractResponse, error)
	FeatVerify(ctx context.Context, in *FeatVerifyRequest, opts ...grpc.CallOption) (*FeatVerifyResponse, error)
}

type faceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceApiClient(cc grpc.ClientConnInterface) FaceApiClient {
	return &faceApiClient{cc}
}

func (c *faceApiClient) FaceVerify(ctx context.Context, in *FaceVerifyRequest, opts ...grpc.CallOption) (*FaceVerifyResponse, error) {
	out := new(FaceVerifyResponse)
	err := c.cc.Invoke(ctx, "/pb.FaceApi/FaceVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceApiClient) FaceExtract(ctx context.Context, in *FaceExtractRequest, opts ...grpc.CallOption) (*FaceExtractResponse, error) {
	out := new(FaceExtractResponse)
	err := c.cc.Invoke(ctx, "/pb.FaceApi/FaceExtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceApiClient) FeatVerify(ctx context.Context, in *FeatVerifyRequest, opts ...grpc.CallOption) (*FeatVerifyResponse, error) {
	out := new(FeatVerifyResponse)
	err := c.cc.Invoke(ctx, "/pb.FaceApi/FeatVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceApiServer is the server API for FaceApi service.
// All implementations must embed UnimplementedFaceApiServer
// for forward compatibility
type FaceApiServer interface {
	FaceVerify(context.Context, *FaceVerifyRequest) (*FaceVerifyResponse, error)
	FaceExtract(context.Context, *FaceExtractRequest) (*FaceExtractResponse, error)
	FeatVerify(context.Context, *FeatVerifyRequest) (*FeatVerifyResponse, error)
	mustEmbedUnimplementedFaceApiServer()
}

// UnimplementedFaceApiServer must be embedded to have forward compatible implementations.
type UnimplementedFaceApiServer struct {
}

func (UnimplementedFaceApiServer) FaceVerify(context.Context, *FaceVerifyRequest) (*FaceVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceVerify not implemented")
}
func (UnimplementedFaceApiServer) FaceExtract(context.Context, *FaceExtractRequest) (*FaceExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceExtract not implemented")
}
func (UnimplementedFaceApiServer) FeatVerify(context.Context, *FeatVerifyRequest) (*FeatVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatVerify not implemented")
}
func (UnimplementedFaceApiServer) mustEmbedUnimplementedFaceApiServer() {}

// UnsafeFaceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceApiServer will
// result in compilation errors.
type UnsafeFaceApiServer interface {
	mustEmbedUnimplementedFaceApiServer()
}

func RegisterFaceApiServer(s grpc.ServiceRegistrar, srv FaceApiServer) {
	s.RegisterService(&FaceApi_ServiceDesc, srv)
}

func _FaceApi_FaceVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceApiServer).FaceVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FaceApi/FaceVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceApiServer).FaceVerify(ctx, req.(*FaceVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceApi_FaceExtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceApiServer).FaceExtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FaceApi/FaceExtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceApiServer).FaceExtract(ctx, req.(*FaceExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceApi_FeatVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceApiServer).FeatVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FaceApi/FeatVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceApiServer).FeatVerify(ctx, req.(*FeatVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaceApi_ServiceDesc is the grpc.ServiceDesc for FaceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FaceApi",
	HandlerType: (*FaceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FaceVerify",
			Handler:    _FaceApi_FaceVerify_Handler,
		},
		{
			MethodName: "FaceExtract",
			Handler:    _FaceApi_FaceExtract_Handler,
		},
		{
			MethodName: "FeatVerify",
			Handler:    _FaceApi_FeatVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/face_api.proto",
}
