// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: worker/worker.proto

package worker

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeStatus int32

const (
	NodeStatus_Dead     NodeStatus = 0
	NodeStatus_ReadOnly NodeStatus = 1
	NodeStatus_Ready    NodeStatus = 2
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "Dead",
		1: "ReadOnly",
		2: "Ready",
	}
	NodeStatus_value = map[string]int32{
		"Dead":     0,
		"ReadOnly": 1,
		"Ready":    2,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_worker_worker_proto_enumTypes[0].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_worker_worker_proto_enumTypes[0]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{0}
}

type ListMode int32

const (
	ListMode_All         ListMode = 0
	ListMode_OnlyFeature ListMode = 1
	ListMode_OnlyCluster ListMode = 2
)

// Enum value maps for ListMode.
var (
	ListMode_name = map[int32]string{
		0: "All",
		1: "OnlyFeature",
		2: "OnlyCluster",
	}
	ListMode_value = map[string]int32{
		"All":         0,
		"OnlyFeature": 1,
		"OnlyCluster": 2,
	}
)

func (x ListMode) Enum() *ListMode {
	p := new(ListMode)
	*p = x
	return p
}

func (x ListMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListMode) Descriptor() protoreflect.EnumDescriptor {
	return file_worker_worker_proto_enumTypes[1].Descriptor()
}

func (ListMode) Type() protoreflect.EnumType {
	return &file_worker_worker_proto_enumTypes[1]
}

func (x ListMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListMode.Descriptor instead.
func (ListMode) EnumDescriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{1}
}

type ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId           int32                `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	IndexId            string               `protobuf:"bytes,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	WorkerId           string               `protobuf:"bytes,3,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ShardSize          uint64               `protobuf:"varint,4,opt,name=shard_size,json=shardSize,proto3" json:"shard_size,omitempty"`
	FirstTime          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=first_time,json=firstTime,proto3" json:"first_time,omitempty"`
	LastTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	Writing            bool                 `protobuf:"varint,7,opt,name=writing,proto3" json:"writing,omitempty"`
	Retrained          bool                 `protobuf:"varint,8,opt,name=retrained,proto3" json:"retrained,omitempty"`
	UseCpuIndex        bool                 `protobuf:"varint,9,opt,name=useCpuIndex,proto3" json:"useCpuIndex,omitempty"`
	DbId               string               `protobuf:"bytes,10,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	NsId               string               `protobuf:"bytes,11,opt,name=ns_id,json=nsId,proto3" json:"ns_id,omitempty"`
	UseSnapshotRecover bool                 `protobuf:"varint,12,opt,name=use_snapshot_recover,json=useSnapshotRecover,proto3" json:"use_snapshot_recover,omitempty"`
	UpdateTime         *timestamp.Timestamp `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ShardInfo) Reset() {
	*x = ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInfo) ProtoMessage() {}

func (x *ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInfo.ProtoReflect.Descriptor instead.
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{0}
}

func (x *ShardInfo) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *ShardInfo) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ShardInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *ShardInfo) GetShardSize() uint64 {
	if x != nil {
		return x.ShardSize
	}
	return 0
}

func (x *ShardInfo) GetFirstTime() *timestamp.Timestamp {
	if x != nil {
		return x.FirstTime
	}
	return nil
}

func (x *ShardInfo) GetLastTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastTime
	}
	return nil
}

func (x *ShardInfo) GetWriting() bool {
	if x != nil {
		return x.Writing
	}
	return false
}

func (x *ShardInfo) GetRetrained() bool {
	if x != nil {
		return x.Retrained
	}
	return false
}

func (x *ShardInfo) GetUseCpuIndex() bool {
	if x != nil {
		return x.UseCpuIndex
	}
	return false
}

func (x *ShardInfo) GetDbId() string {
	if x != nil {
		return x.DbId
	}
	return ""
}

func (x *ShardInfo) GetNsId() string {
	if x != nil {
		return x.NsId
	}
	return ""
}

func (x *ShardInfo) GetUseSnapshotRecover() bool {
	if x != nil {
		return x.UseSnapshotRecover
	}
	return false
}

func (x *ShardInfo) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards                 uint32     `protobuf:"varint,1,opt,name=shards,proto3" json:"shards,omitempty"`
	TotalGpuMemorySize     uint64     `protobuf:"varint,2,opt,name=total_gpu_memory_size,json=totalGpuMemorySize,proto3" json:"total_gpu_memory_size,omitempty"`
	AvailableGpuMemorySize uint64     `protobuf:"varint,3,opt,name=available_gpu_memory_size,json=availableGpuMemorySize,proto3" json:"available_gpu_memory_size,omitempty"`
	LoadFactor             float32    `protobuf:"fixed32,4,opt,name=load_factor,json=loadFactor,proto3" json:"load_factor,omitempty"`
	Status                 NodeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=worker.NodeStatus" json:"status,omitempty"`
	ClusterShards          uint32     `protobuf:"varint,6,opt,name=cluster_shards,json=clusterShards,proto3" json:"cluster_shards,omitempty"`
	TotalMemorySize        uint64     `protobuf:"varint,7,opt,name=total_memory_size,json=totalMemorySize,proto3" json:"total_memory_size,omitempty"`
	AvailableMemorySize    uint64     `protobuf:"varint,8,opt,name=available_memory_size,json=availableMemorySize,proto3" json:"available_memory_size,omitempty"`
	LicenseCapacity        uint64     `protobuf:"varint,9,opt,name=license_capacity,json=licenseCapacity,proto3" json:"license_capacity,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{1}
}

func (x *NodeInfo) GetShards() uint32 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *NodeInfo) GetTotalGpuMemorySize() uint64 {
	if x != nil {
		return x.TotalGpuMemorySize
	}
	return 0
}

func (x *NodeInfo) GetAvailableGpuMemorySize() uint64 {
	if x != nil {
		return x.AvailableGpuMemorySize
	}
	return 0
}

func (x *NodeInfo) GetLoadFactor() float32 {
	if x != nil {
		return x.LoadFactor
	}
	return 0
}

func (x *NodeInfo) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_Dead
}

func (x *NodeInfo) GetClusterShards() uint32 {
	if x != nil {
		return x.ClusterShards
	}
	return 0
}

func (x *NodeInfo) GetTotalMemorySize() uint64 {
	if x != nil {
		return x.TotalMemorySize
	}
	return 0
}

func (x *NodeInfo) GetAvailableMemorySize() uint64 {
	if x != nil {
		return x.AvailableMemorySize
	}
	return 0
}

func (x *NodeInfo) GetLicenseCapacity() uint64 {
	if x != nil {
		return x.LicenseCapacity
	}
	return 0
}

type ClusterShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId   string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardSize uint64 `protobuf:"varint,2,opt,name=shard_size,json=shardSize,proto3" json:"shard_size,omitempty"`
	Version   int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClusterShardInfo) Reset() {
	*x = ClusterShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterShardInfo) ProtoMessage() {}

func (x *ClusterShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterShardInfo.ProtoReflect.Descriptor instead.
func (*ClusterShardInfo) Descriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterShardInfo) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ClusterShardInfo) GetShardSize() uint64 {
	if x != nil {
		return x.ShardSize
	}
	return 0
}

func (x *ClusterShardInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WritingOnly bool     `protobuf:"varint,1,opt,name=writing_only,json=writingOnly,proto3" json:"writing_only,omitempty"`
	Mode        ListMode `protobuf:"varint,2,opt,name=mode,proto3,enum=worker.ListMode" json:"mode,omitempty"`
	NsId        string   `protobuf:"bytes,3,opt,name=ns_id,json=nsId,proto3" json:"ns_id,omitempty"` // [SINCE v3.0.0]
	DbId        string   `protobuf:"bytes,4,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"` // [SINCE v3.0.0]
}

func (x *ListShardsRequest) Reset() {
	*x = ListShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsRequest) ProtoMessage() {}

func (x *ListShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsRequest.ProtoReflect.Descriptor instead.
func (*ListShardsRequest) Descriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{3}
}

func (x *ListShardsRequest) GetWritingOnly() bool {
	if x != nil {
		return x.WritingOnly
	}
	return false
}

func (x *ListShardsRequest) GetMode() ListMode {
	if x != nil {
		return x.Mode
	}
	return ListMode_All
}

func (x *ListShardsRequest) GetNsId() string {
	if x != nil {
		return x.NsId
	}
	return ""
}

func (x *ListShardsRequest) GetDbId() string {
	if x != nil {
		return x.DbId
	}
	return ""
}

type ListShardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInfo          *NodeInfo           `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	ShardInfos        []*ShardInfo        `protobuf:"bytes,2,rep,name=shard_infos,json=shardInfos,proto3" json:"shard_infos,omitempty"`
	ClusterShardInfos []*ClusterShardInfo `protobuf:"bytes,3,rep,name=cluster_shard_infos,json=clusterShardInfos,proto3" json:"cluster_shard_infos,omitempty"`
}

func (x *ListShardsResponse) Reset() {
	*x = ListShardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsResponse) ProtoMessage() {}

func (x *ListShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsResponse.ProtoReflect.Descriptor instead.
func (*ListShardsResponse) Descriptor() ([]byte, []int) {
	return file_worker_worker_proto_rawDescGZIP(), []int{4}
}

func (x *ListShardsResponse) GetNodeInfo() *NodeInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *ListShardsResponse) GetShardInfos() []*ShardInfo {
	if x != nil {
		return x.ShardInfos
	}
	return nil
}

func (x *ListShardsResponse) GetClusterShardInfos() []*ClusterShardInfo {
	if x != nil {
		return x.ClusterShardInfos
	}
	return nil
}

var File_worker_worker_proto protoreflect.FileDescriptor

var file_worker_worker_proto_rawDesc = []byte{
	0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x03, 0x0a,
	0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x05,
	0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x62, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x86, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x73, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x62, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0x2f, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65,
	0x61, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x2a, 0x35, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x02, 0x32, 0x54, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x64, 0x61,
	0x70, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_worker_worker_proto_rawDescOnce sync.Once
	file_worker_worker_proto_rawDescData = file_worker_worker_proto_rawDesc
)

func file_worker_worker_proto_rawDescGZIP() []byte {
	file_worker_worker_proto_rawDescOnce.Do(func() {
		file_worker_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_worker_proto_rawDescData)
	})
	return file_worker_worker_proto_rawDescData
}

var file_worker_worker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_worker_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_worker_worker_proto_goTypes = []interface{}{
	(NodeStatus)(0),             // 0: worker.NodeStatus
	(ListMode)(0),               // 1: worker.ListMode
	(*ShardInfo)(nil),           // 2: worker.ShardInfo
	(*NodeInfo)(nil),            // 3: worker.NodeInfo
	(*ClusterShardInfo)(nil),    // 4: worker.ClusterShardInfo
	(*ListShardsRequest)(nil),   // 5: worker.ListShardsRequest
	(*ListShardsResponse)(nil),  // 6: worker.ListShardsResponse
	(*timestamp.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_worker_worker_proto_depIdxs = []int32{
	7, // 0: worker.ShardInfo.first_time:type_name -> google.protobuf.Timestamp
	7, // 1: worker.ShardInfo.last_time:type_name -> google.protobuf.Timestamp
	7, // 2: worker.ShardInfo.update_time:type_name -> google.protobuf.Timestamp
	0, // 3: worker.NodeInfo.status:type_name -> worker.NodeStatus
	1, // 4: worker.ListShardsRequest.mode:type_name -> worker.ListMode
	3, // 5: worker.ListShardsResponse.node_info:type_name -> worker.NodeInfo
	2, // 6: worker.ListShardsResponse.shard_infos:type_name -> worker.ShardInfo
	4, // 7: worker.ListShardsResponse.cluster_shard_infos:type_name -> worker.ClusterShardInfo
	5, // 8: worker.WorkerService.ListShards:input_type -> worker.ListShardsRequest
	6, // 9: worker.WorkerService.ListShards:output_type -> worker.ListShardsResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_worker_worker_proto_init() }
func file_worker_worker_proto_init() {
	if File_worker_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_worker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_worker_proto_goTypes,
		DependencyIndexes: file_worker_worker_proto_depIdxs,
		EnumInfos:         file_worker_worker_proto_enumTypes,
		MessageInfos:      file_worker_worker_proto_msgTypes,
	}.Build()
	File_worker_worker_proto = out.File
	file_worker_worker_proto_rawDesc = nil
	file_worker_worker_proto_goTypes = nil
	file_worker_worker_proto_depIdxs = nil
}
